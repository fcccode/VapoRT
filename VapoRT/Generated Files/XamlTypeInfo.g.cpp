//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "ChatPage.xaml.h"
#include "LoginPage.xaml.h"
#include "App.xaml.h"
#include "ItemsPage.xaml.h"
#include "SplitPage.xaml.h"

#include "ChatPage.g.hpp"
#include "LoginPage.g.hpp"
#include "App.g.hpp"
#include "ItemsPage.g.hpp"
#include "SplitPage.g.hpp"

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        _otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.DataTemplateSelector")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.DataTemplate")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.DependencyObject")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Boolean")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.UIElement")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Input.ICommand")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Int32")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Media.Brush")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.Foundation.Uri")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Interop.TypeName")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Media.ImageSource")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Interop.IBindableObservableVector")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"UInt32")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"VapoRT.Common.LayoutAwarePage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"DefaultViewModel");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableMap<String, Object>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->DictionaryAdd =
            [](Object^ instance, Object^ key, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableMap<::Platform::String^, ::Platform::Object^>^)instance;
                auto newKey = (Platform::String^)key;
                auto newItem = (Platform::Object^)item;
                collection->Insert(newKey, newItem);
            };
        return userType;
    }

    if (typeName == L"VapoRT.ConversationDataTemplateSelector")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.DataTemplateSelector"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::ConversationDataTemplateSelector(); 
            };
        userType->AddMemberName(L"ToMeTemplate");
        userType->AddMemberName(L"FromMeTemplate");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.StayScrolledToBottom")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.DependencyObject"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::StayScrolledToBottom(); 
            };
        userType->AddMemberName(L"IsEnabled");
        return userType;
    }

    if (typeName == L"VapoRT.UpdateSourceHelper")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.DependencyObject"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::UpdateSourceHelper(); 
            };
        userType->AddMemberName(L"IsEnabled");
        userType->AddMemberName(L"UpdateSourceText");
        return userType;
    }

    if (typeName == L"VapoRT.EnterKeyToCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.DependencyObject"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::EnterKeyToCommand(); 
            };
        userType->AddMemberName(L"EnterKeyCommand");
        return userType;
    }

    if (typeName == L"VapoRT.ChatPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.LayoutAwarePage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::ChatPage(); 
            };
        return userType;
    }

    if (typeName == L"VapoRT.SteamDataDesignVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::SteamDataDesignVM(); 
            };
        userType->AddMemberName(L"Title");
        userType->AddMemberName(L"Items");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector<VapoRT.SteamUserDesignVM>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<::VapoRT::SteamUserDesignVM^>^)instance;
                auto newItem = (VapoRT::SteamUserDesignVM^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"VapoRT.SteamUserDesignVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.BindableBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::SteamUserDesignVM(); 
            };
        userType->AddMemberName(L"SteamID");
        userType->AddMemberName(L"PersonaName");
        userType->AddMemberName(L"StatusString");
        userType->AddMemberName(L"OnlineStatus");
        userType->AddMemberName(L"InGame");
        userType->AddMemberName(L"StatusColor");
        userType->AddMemberName(L"ConversationHistory");
        userType->AddMemberName(L"ProfileURI");
        userType->AddMemberName(L"AvatarImageURI");
        userType->AddMemberName(L"LastLogOffTime");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.Common.BindableBase")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.DependencyObject"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Type");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector<VapoRT.ConversationItemVM>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<::VapoRT::ConversationItemVM^>^)instance;
                auto newItem = (VapoRT::ConversationItemVM^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"VapoRT.ConversationItemVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::ConversationItemVM(); 
            };
        userType->AddMemberName(L"Message");
        userType->AddMemberName(L"From");
        userType->AddMemberName(L"FromMe");
        userType->AddMemberName(L"FromPic");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.DateTime")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.ValueType"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"System.ValueType")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"VapoRT.SteamConnectionVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.BindableBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::SteamConnectionVM(); 
            };
        userType->AddMemberName(L"UserName");
        userType->AddMemberName(L"Password");
        userType->AddMemberName(L"FConnecting");
        userType->AddMemberName(L"Status");
        userType->AddMemberName(L"SteamGuard");
        userType->AddMemberName(L"FInputSteamGuard");
        userType->AddMemberName(L"DoLoginCommand");
        userType->AddMemberName(L"LoginButtonEnabled");
        userType->AddMemberName(L"FConnected");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.Common.DelegateCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        return userType;
    }

    if (typeName == L"VapoRT.ItemsPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.LayoutAwarePage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::ItemsPage(); 
            };
        return userType;
    }

    if (typeName == L"VapoRT.Common.BooleanToVisibilityConverter")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::Common::BooleanToVisibilityConverter(); 
            };
        return userType;
    }

    if (typeName == L"VapoRT.LoginPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.LayoutAwarePage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::LoginPage(); 
            };
        return userType;
    }

    if (typeName == L"VapoRT.SplitPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.LayoutAwarePage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::SplitPage(); 
            };
        return userType;
    }

    if (typeName == L"VapoRT.Data.SampleDataCommon")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.BindableBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Description");
        userType->AddMemberName(L"Image");
        userType->AddMemberName(L"Subtitle");
        userType->AddMemberName(L"Title");
        userType->AddMemberName(L"UniqueId");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.Data.SampleDataItem")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Data.SampleDataCommon"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Group");
        userType->AddMemberName(L"Content");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.Data.SampleDataGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Data.SampleDataCommon"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"TopItems");
        userType->AddMemberName(L"Items");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector<VapoRT.Data.SampleDataItem>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<::VapoRT::Data::SampleDataItem^>^)instance;
                auto newItem = (VapoRT::Data::SampleDataItem^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<VapoRT.Data.SampleDataItem>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::VapoRT::Data::SampleDataItem^>^)instance;
                auto newItem = (VapoRT::Data::SampleDataItem^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"VapoRT.Data.SampleDataSource")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::Data::SampleDataSource(); 
            };
        userType->AddMemberName(L"AllGroups");
        userType->AddMemberName(L"Groups");
        userType->AddMemberName(L"Group");
        userType->AddMemberName(L"Item");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<VapoRT.Data.SampleDataGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::VapoRT::Data::SampleDataGroup^>^)instance;
                auto newItem = (VapoRT::Data::SampleDataGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IIterable<VapoRT.Data.SampleDataGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"VapoRT.SteamUserVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"VapoRT.Common.BindableBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"SendingMessage");
        userType->AddMemberName(L"CurrentMessage");
        userType->AddMemberName(L"SendCurrentMessage");
        userType->AddMemberName(L"ConversationHistory");
        userType->AddMemberName(L"StatusColor");
        userType->AddMemberName(L"InGame");
        userType->AddMemberName(L"OnlineStatus");
        userType->AddMemberName(L"StatusString");
        userType->AddMemberName(L"LastLogOffTime");
        userType->AddMemberName(L"AvatarImageURI");
        userType->AddMemberName(L"PersonaName");
        userType->AddMemberName(L"SteamID");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.VirtualConversationList")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Size");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"VapoRT.SteamDataVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::VapoRT::SteamDataVM(); 
            };
        userType->AddMemberName(L"Items");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector<VapoRT.SteamUserVM>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<::VapoRT::SteamUserVM^>^)instance;
                auto newItem = (VapoRT::SteamUserVM^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"VapoRT.Common.LayoutAwarePage.DefaultViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DefaultViewModel", L"Windows.Foundation.Collections.IObservableMap<String, Object>");
        xamlMember->SetIsDependencyProperty();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Common::LayoutAwarePage^)instance;
                return that->DefaultViewModel;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Common::LayoutAwarePage^)instance;
                that->DefaultViewModel = (::Windows::Foundation::Collections::IObservableMap<::Platform::String^, ::Platform::Object^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.ConversationDataTemplateSelector.ToMeTemplate")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ToMeTemplate", L"Windows.UI.Xaml.DataTemplate");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::ConversationDataTemplateSelector^)instance;
                return that->ToMeTemplate;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::ConversationDataTemplateSelector^)instance;
                that->ToMeTemplate = (::Windows::UI::Xaml::DataTemplate^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.ConversationDataTemplateSelector.FromMeTemplate")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FromMeTemplate", L"Windows.UI.Xaml.DataTemplate");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::ConversationDataTemplateSelector^)instance;
                return that->FromMeTemplate;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::ConversationDataTemplateSelector^)instance;
                that->FromMeTemplate = (::Windows::UI::Xaml::DataTemplate^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.StayScrolledToBottom.IsEnabled")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsEnabled", L"Boolean");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.UIElement");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::StayScrolledToBottom::GetIsEnabled((::Windows::UI::Xaml::UIElement^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::VapoRT::StayScrolledToBottom::SetIsEnabled((::Windows::UI::Xaml::UIElement^)instance, (::Platform::Boolean)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.UpdateSourceHelper.IsEnabled")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsEnabled", L"Boolean");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.UIElement");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::UpdateSourceHelper::GetIsEnabled((::Windows::UI::Xaml::UIElement^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::VapoRT::UpdateSourceHelper::SetIsEnabled((::Windows::UI::Xaml::UIElement^)instance, (::Platform::Boolean)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.UpdateSourceHelper.UpdateSourceText")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"UpdateSourceText", L"String");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.DependencyObject");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::UpdateSourceHelper::GetUpdateSourceText((::Windows::UI::Xaml::DependencyObject^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::VapoRT::UpdateSourceHelper::SetUpdateSourceText((::Windows::UI::Xaml::DependencyObject^)instance, (::Platform::String^)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.EnterKeyToCommand.EnterKeyCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"EnterKeyCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->SetTargetTypeName(L"Windows.UI.Xaml.UIElement");
        xamlMember->SetIsDependencyProperty();
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::EnterKeyToCommand::GetEnterKeyCommand((::Windows::UI::Xaml::UIElement^)instance);
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                ::VapoRT::EnterKeyToCommand::SetEnterKeyCommand((::Windows::UI::Xaml::UIElement^)instance, (::Windows::UI::Xaml::Input::ICommand^)value);
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamDataDesignVM.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamDataDesignVM^)instance;
                return that->Title;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamDataDesignVM^)instance;
                that->Title = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamDataDesignVM.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IVector<VapoRT.SteamUserDesignVM>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamDataDesignVM^)instance;
                return that->Items;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamDataDesignVM^)instance;
                that->Items = (::Windows::Foundation::Collections::IVector<::VapoRT::SteamUserDesignVM^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.SteamID")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SteamID", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->SteamID;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->SteamID = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.PersonaName")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"PersonaName", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->PersonaName;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->PersonaName = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.StatusString")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"StatusString", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->StatusString;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->StatusString = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.OnlineStatus")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"OnlineStatus", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->OnlineStatus);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->OnlineStatus = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.InGame")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"InGame", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->InGame);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->InGame = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.StatusColor")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"StatusColor", L"Windows.UI.Xaml.Media.Brush");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->StatusColor;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->StatusColor = (::Windows::UI::Xaml::Media::Brush^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.ConversationHistory")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ConversationHistory", L"Windows.Foundation.Collections.IVector<VapoRT.ConversationItemVM>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->ConversationHistory;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->ConversationHistory = (::Windows::Foundation::Collections::IVector<::VapoRT::ConversationItemVM^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.ConversationItemVM.Message")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Message", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                return that->Message;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                that->Message = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.ConversationItemVM.From")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"From", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                return that->From;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                that->From = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.ConversationItemVM.FromMe")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FromMe", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->FromMe);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->FromMe = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.ConversationItemVM.FromPic")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FromPic", L"Windows.Foundation.Uri");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                return that->FromPic;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::ConversationItemVM^)instance;
                that->FromPic = (::Windows::Foundation::Uri^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.ProfileURI")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ProfileURI", L"Windows.Foundation.Uri");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->ProfileURI;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->ProfileURI = (::Windows::Foundation::Uri^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.AvatarImageURI")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AvatarImageURI", L"Windows.Foundation.Uri");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                return that->AvatarImageURI;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                that->AvatarImageURI = (::Windows::Foundation::Uri^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserDesignVM.LastLogOffTime")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"LastLogOffTime", L"Windows.Foundation.DateTime");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                auto value = ref new ::Platform::Box<::Windows::Foundation::DateTime>(that->LastLogOffTime);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserDesignVM^)instance;
                auto boxedValue = (::Platform::IBox<::Windows::Foundation::DateTime>^)value;
                that->LastLogOffTime = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Common.BindableBase.Type")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Type", L"Windows.UI.Xaml.Interop.TypeName");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Common::BindableBase^)instance;
                auto value = ref new ::Platform::Box<::Windows::UI::Xaml::Interop::TypeName>(that->Type);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.UserName")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"UserName", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                return that->UserName;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                that->UserName = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.Password")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Password", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                return that->Password;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                that->Password = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.FConnecting")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FConnecting", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->FConnecting);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->FConnecting = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.Status")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Status", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                return that->Status;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                that->Status = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.SteamGuard")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SteamGuard", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                return that->SteamGuard;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                that->SteamGuard = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.FInputSteamGuard")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FInputSteamGuard", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->FInputSteamGuard);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->FInputSteamGuard = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.DoLoginCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DoLoginCommand", L"VapoRT.Common.DelegateCommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                return that->DoLoginCommand;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                that->DoLoginCommand = (::VapoRT::Common::DelegateCommand^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.LoginButtonEnabled")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"LoginButtonEnabled", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->LoginButtonEnabled);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamConnectionVM.FConnected")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FConnected", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->FConnected);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamConnectionVM^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->FConnected = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataCommon.Description")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Description", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                return that->Description;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                that->Description = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataCommon.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                return that->Image;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                that->Image = (::Windows::UI::Xaml::Media::ImageSource^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataCommon.Subtitle")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Subtitle", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                return that->Subtitle;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                that->Subtitle = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataCommon.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                return that->Title;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                that->Title = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataCommon.UniqueId")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"UniqueId", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                return that->UniqueId;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataCommon^)instance;
                that->UniqueId = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataItem.Group")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Group", L"VapoRT.Data.SampleDataGroup");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataItem^)instance;
                return that->Group;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataItem^)instance;
                that->Group = (::VapoRT::Data::SampleDataGroup^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataItem.Content")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Content", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataItem^)instance;
                return that->Content;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::Data::SampleDataItem^)instance;
                that->Content = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataGroup.TopItems")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"TopItems", L"Windows.Foundation.Collections.IVector<VapoRT.Data.SampleDataItem>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataGroup^)instance;
                return that->TopItems;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<VapoRT.Data.SampleDataItem>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataSource.AllGroups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AllGroups", L"Windows.Foundation.Collections.IObservableVector<VapoRT.Data.SampleDataGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::Data::SampleDataSource^)instance;
                return that->AllGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataSource.Groups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Groups", L"Windows.Foundation.Collections.IIterable<VapoRT.Data.SampleDataGroup>");
        xamlMember->SetTargetTypeName(L"String");
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::Data::SampleDataSource::GetGroups((::Platform::String^)instance);
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataSource.Group")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Group", L"VapoRT.Data.SampleDataGroup");
        xamlMember->SetTargetTypeName(L"String");
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::Data::SampleDataSource::GetGroup((::Platform::String^)instance);
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.Data.SampleDataSource.Item")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Item", L"VapoRT.Data.SampleDataItem");
        xamlMember->SetTargetTypeName(L"String");
        xamlMember->SetIsAttachable();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                return ::VapoRT::Data::SampleDataSource::GetItem((::Platform::String^)instance);
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.SendingMessage")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SendingMessage", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->SendingMessage);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->SendingMessage = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.CurrentMessage")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CurrentMessage", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->CurrentMessage;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                that->CurrentMessage = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.SendCurrentMessage")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SendCurrentMessage", L"VapoRT.Common.DelegateCommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->SendCurrentMessage;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                that->SendCurrentMessage = (::VapoRT::Common::DelegateCommand^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.ConversationHistory")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ConversationHistory", L"Windows.UI.Xaml.Interop.IBindableObservableVector");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->ConversationHistory;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.StatusColor")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"StatusColor", L"Windows.UI.Xaml.Media.Brush");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->StatusColor;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.InGame")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"InGame", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->InGame);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.OnlineStatus")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"OnlineStatus", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->OnlineStatus);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.StatusString")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"StatusString", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->StatusString;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.LastLogOffTime")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"LastLogOffTime", L"Windows.Foundation.DateTime");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                auto value = ref new ::Platform::Box<::Windows::Foundation::DateTime>(that->LastLogOffTime);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.AvatarImageURI")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AvatarImageURI", L"Windows.Foundation.Uri");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->AvatarImageURI;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.PersonaName")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"PersonaName", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->PersonaName;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamUserVM.SteamID")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SteamID", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamUserVM^)instance;
                return that->SteamID;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.VirtualConversationList.Size")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Size", L"UInt32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::VirtualConversationList^)instance;
                auto value = ref new ::Platform::Box<::default::uint32>(that->Size);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"VapoRT.SteamDataVM.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IVector<VapoRT.SteamUserVM>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::VapoRT::SteamDataVM^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    return nullptr;
}

